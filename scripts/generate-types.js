const { compile } = require('json-schema-to-typescript');
const fs = require('fs');
const path = require('path');

async function generateTypes(schemaPath, outputPath) {
    const schema = JSON.parse(fs.readFileSync(schemaPath, 'utf8'));
    const typeName = schema.title || path.basename(schemaPath, '.schema.json');
    
    try {
        const ts = await compile(schema, typeName, {
            format: true,
            bannerComment: '/* eslint-disable */\n/**\n * This file was automatically generated by json-schema-to-typescript.\n * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n * and run json-schema-to-typescript to regenerate this file.\n */',
            style: {
                singleQuote: true,
                semi: true,
                tabWidth: 4,
                trailingComma: 'none'
            },
            formats: {
                'date-time': 'Date',
                'date': 'Date'
            }
        });
        
        fs.writeFileSync(outputPath, ts);
        console.log(`Generated types for ${typeName}`);
    } catch (err) {
        console.error(`Error generating types for ${typeName}:`, err);
    }
}

async function processDirectory(schemaDir, outputDir) {
    const files = fs.readdirSync(schemaDir);
    
    for (const file of files) {
        const schemaPath = path.join(schemaDir, file);
        const stat = fs.statSync(schemaPath);
        
        if (stat.isDirectory()) {
            const nestedOutputDir = path.join(outputDir, file);
            if (!fs.existsSync(nestedOutputDir)) {
                fs.mkdirSync(nestedOutputDir, { recursive: true });
            }
            await processDirectory(schemaPath, nestedOutputDir);
        } else if (file.endsWith('.schema.json')) {
            const outputPath = path.join(
                outputDir,
                file.replace('.schema.json', '.d.ts')
            );
            await generateTypes(schemaPath, outputPath);
        }
    }
}

const schemasDir = path.join(__dirname, '../schemas');
const typesDir = path.join(__dirname, '../dist/types');

// Ensure the output directory exists
if (!fs.existsSync(typesDir)) {
    fs.mkdirSync(typesDir, { recursive: true });
}

// Copy schemas to dist
const schemaDistDir = path.join(__dirname, '../dist/schemas');
if (!fs.existsSync(schemaDistDir)) {
    fs.mkdirSync(schemaDistDir, { recursive: true });
}

const copyDir = (src, dest) => {
    if (!fs.existsSync(dest)) {
        fs.mkdirSync(dest, { recursive: true });
    }
    const files = fs.readdirSync(src);
    for (const file of files) {
        const srcPath = path.join(src, file);
        const destPath = path.join(dest, file);
        const stat = fs.statSync(srcPath);
        if (stat.isDirectory()) {
            copyDir(srcPath, destPath);
        } else {
            fs.copyFileSync(srcPath, destPath);
        }
    }
};

copyDir(schemasDir, schemaDistDir);

// Generate types
processDirectory(schemasDir, typesDir)
    .then(() => console.log('Successfully generated all TypeScript definition files.'))
    .catch(err => console.error('Error generating types:', err));